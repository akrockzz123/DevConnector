{"ast":null,"code":"import axios from \"axios\";\nimport { SetAlert } from \"./alertAction\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL } from '../constants/types';\nimport setAuthToken from \"../utils/setAuthToken\"; //Register user\n\nexport const RegisterUser = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    console.log(res.data.token);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data.token\n    });\n    dispatch(SetAlert('User registered', 'success'));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(SetAlert(error, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\nexport const GetUser = () => async dispatch => {\n  if (localStorage.token) setAuthToken(localStorage.token); //const body = JSON.stringify({name,email,password})\n\n  try {\n    const res = await axios.get('/api/auth');\n    console.log(res.data); //\n\n    dispatch({\n      type: USER_LOADED,\n      payload: JSON.stringify(res.data)\n    }); //dispatch(SetAlert('User registered','success'));\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //login action\n\nexport const login = (email, password) => async dispatch => {\n  if (localStorage.token) setAuthToken(localStorage.token);\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    console.log(res.data); //\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: res.data\n    }); //dispatch(SetAlert('User registered','success'));\n  } catch (err) {\n    dispatch({\n      type: USER_LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/hi/Desktop/DevConnector/client/src/Actions/auth.js"],"names":["axios","SetAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","setAuthToken","RegisterUser","name","email","password","dispatch","config","headers","body","JSON","stringify","res","post","console","log","data","token","type","payload","err","errors","response","forEach","error","GetUser","localStorage","get","login"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nimport { SetAlert } from \"./alertAction\";\r\nimport {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL\r\n} from '../constants/types';\r\n\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\n//Register user\r\nexport const RegisterUser = ({name,email,password}) => async dispatch => {\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({name,email,password})\r\n\r\n    try {\r\n        const res = await axios.post('/api/users',body,config)\r\n        console.log(res.data.token)\r\n        dispatch({\r\n            type: REGISTER_SUCCESS,\r\n            payload: res.data.token\r\n        });\r\n\r\n        dispatch(SetAlert('User registered','success'));\r\n\r\n    }catch(err) {\r\n\r\n        const errors = err.response.data.errors;\r\n\r\n        if(errors) {\r\n            errors.forEach(error => dispatch(SetAlert(error,'danger')))\r\n        }\r\n        dispatch({\r\n            type: REGISTER_FAIL\r\n        });\r\n    }\r\n}\r\n\r\nexport const GetUser = () => async dispatch => {\r\n\r\n    if(localStorage.token)\r\n    setAuthToken(localStorage.token)\r\n\r\n    //const body = JSON.stringify({name,email,password})\r\n\r\n    try {\r\n        const res = await axios.get('/api/auth')\r\n        console.log(res.data)//\r\n        dispatch({\r\n            type: USER_LOADED,\r\n            payload: JSON.stringify(res.data)\r\n        });\r\n\r\n        //dispatch(SetAlert('User registered','success'));\r\n\r\n    }catch(err) {\r\n\r\n                dispatch({\r\n            type: AUTH_ERROR\r\n        });\r\n    }\r\n}\r\n\r\n//login action\r\n\r\nexport const login = (email,password) => async dispatch => {\r\n    if(localStorage.token)\r\n    setAuthToken(localStorage.token)\r\n\r\n    const body = JSON.stringify({email,password})\r\n\r\n    try {\r\n        const res = await axios.post('/api/auth',body,config)\r\n        console.log(res.data)//\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: res.data\r\n        });\r\n\r\n        //dispatch(SetAlert('User registered','success'));\r\n\r\n    }catch(err) {\r\n\r\n                dispatch({\r\n            type: USER_LOGIN_FAIL\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}