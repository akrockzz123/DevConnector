{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport { SetAlert } from \"./alertAction\";\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from '../constants/types';\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response,\n        status: err.response\n      }\n    });\n  }\n};\nexport const addLikes = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n    dispatch(getPosts());\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response,\n        status: err.response\n      }\n    });\n  }\n};\nexport const addPost = (postId, formData) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post(`/api/posts/comment/${postId}`, formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(SetAlert('Post created', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response,\n        status: err.response\n      }\n    });\n  }\n};\nexport const removeLikes = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n    dispatch(getPosts());\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response,\n        status: err.response\n      }\n    });\n  }\n};\nexport const deletePost = postId => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/posts/${postId}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: {\n        postId\n      }\n    });\n    dispatch(SetAlert('Post removed', 'success'));\n    dispatch(getPosts());\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response,\n        status: err.response\n      }\n    });\n  }\n};\nexport const addComment = (postId, formData) => async dispatch => {\n  try {\n    //const formData = JSON.stringify(formData)\n    setAuthToken(localStorage.getItem('token'));\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formData);\n    console.log(typeof formData, typeof body);\n    const res = await axios.post(`/api/posts/comment/${postId}`, body, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(SetAlert('Comment Addded', 'success')); //dispatch(getPosts())\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response,\n        status: err.response\n      }\n    });\n  }\n};\nexport const deleteComment = (id, comment_id) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.delete(`/api/posts/comment/${id}/${comment_id}`);\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: comment_id\n    });\n    dispatch(SetAlert('Comment Addded', 'success')); //dispatch(getPosts())\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response,\n        status: err.response\n      }\n    });\n  }\n};\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response,\n        status: err.response\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/hi/Desktop/DevConnector/client/src/Actions/post.js"],"names":["axios","setAuthToken","SetAlert","GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","getPosts","dispatch","res","get","type","payload","data","err","msg","response","status","addLikes","postId","put","likes","addPost","formData","config","headers","post","removeLikes","deletePost","delete","addComment","localStorage","getItem","body","JSON","stringify","console","log","deleteComment","id","comment_id","getPost"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\n\r\nimport { SetAlert } from \"./alertAction\";\r\n\r\nimport {\r\n   GET_POSTS,\r\n   POST_ERROR,\r\n   UPDATE_LIKES,\r\n   DELETE_POST,\r\n   ADD_POST,\r\n   GET_POST,\r\n   ADD_COMMENT,\r\n   REMOVE_COMMENT\r\n} from '../constants/types';\r\n\r\nexport const getPosts = () => async dispatch => {\r\n    try {\r\n\r\n        const res = await axios.get('/api/posts');\r\n\r\n        dispatch({\r\n            type: GET_POSTS,\r\n            payload: res.data\r\n        });\r\n        \r\n    }catch(err) {\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {msg: err.response,status:err.response}\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const addLikes = (postId) => async dispatch => {\r\n    try {\r\n\r\n        const res = await axios.put(`/api/posts/like/${postId}`);\r\n\r\n        dispatch({\r\n            type: UPDATE_LIKES,\r\n            payload: {postId, likes: res.data}\r\n        });\r\n        dispatch(getPosts())\r\n    }catch(err) {\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {msg: err.response,status:err.response}\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const addPost = (postId,formData) => async dispatch => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }\r\n        const res = await axios.post(`/api/posts/comment/${postId}`,formData,config);\r\n\r\n        dispatch({\r\n            type: ADD_COMMENT,\r\n            payload: res.data\r\n        });\r\n        dispatch(SetAlert('Post created','success'))\r\n    }catch(err) {\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {msg: err.response,status:err.response}\r\n        });\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nexport const removeLikes = (postId) => async dispatch => {\r\n    try {\r\n\r\n        const res = await axios.put(`/api/posts/unlike/${postId}`);\r\n\r\n        dispatch({\r\n            type: UPDATE_LIKES,\r\n            payload: {postId, likes: res.data}\r\n        });\r\n        \r\n        dispatch(getPosts())\r\n    }catch(err) {\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {msg: err.response,status:err.response}\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const deletePost = (postId) => async dispatch => {\r\n    try {\r\n\r\n        const res = await axios.delete(`/api/posts/${postId}`);\r\n\r\n        dispatch({\r\n            type: DELETE_POST,\r\n            payload: {postId}\r\n        });\r\n       \r\n        dispatch(SetAlert('Post removed','success'))\r\n        dispatch(getPosts())\r\n    }catch(err) {\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {msg: err.response,status:err.response}\r\n        });\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport const addComment = (postId,formData) => async dispatch => {\r\n    try {\r\n\r\n        //const formData = JSON.stringify(formData)\r\n        setAuthToken(localStorage.getItem('token'))\r\n        const config = {\r\n            headers: {\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }\r\n\r\n        const body = JSON.stringify(formData)\r\n\r\n        console.log(typeof(formData),typeof(body))\r\n        const res = await axios.post(`/api/posts/comment/${postId}`,body,config);\r\n\r\n        dispatch({\r\n            type: ADD_COMMENT,\r\n            payload: res.data\r\n        });\r\n        \r\n        dispatch(SetAlert('Comment Addded','success'))\r\n        //dispatch(getPosts())\r\n    }catch(err) {\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {msg: err.response,status:err.response}\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const deleteComment = (id,comment_id) => async dispatch => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }\r\n\r\n        const res = await axios.delete(`/api/posts/comment/${id}/${comment_id}`);\r\n\r\n        dispatch({\r\n            type: REMOVE_COMMENT,\r\n            payload: comment_id\r\n        });\r\n        \r\n        dispatch(SetAlert('Comment Addded','success'))\r\n        //dispatch(getPosts())\r\n    }catch(err) {\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {msg: err.response,status:err.response}\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const getPost = (id) => async dispatch => {\r\n    try {\r\n\r\n        const res = await axios.get(`/api/posts/${id}`);\r\n\r\n        dispatch({\r\n            type: GET_POST,\r\n            payload: res.data\r\n        });\r\n        \r\n    }catch(err) {\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {msg: err.response,status:err.response}\r\n        });\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}